{
	"info": {
		"_postman_id": "896e8216-8a93-4a40-bfe0-d3f4d13b71c6",
		"name": "test api Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://reqbin.com/echo/get/json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. corect response format Json\r",
							"pm.test(\"corect response format Json\",function()\r",
							"{\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check that we have all declared fields\", function()\r",
							"{\r",
							"    const jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"success\")\r",
							"});\r",
							"\r",
							"//3. Field value is not null \r",
							"pm.test(\"Check if value is not null\",function()\r",
							"{\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData.success).not.equal(null);\r",
							"});\r",
							"\r",
							"//4. Check if value is not empty\r",
							"pm.test(\"Check if value is not empty\",function()\r",
							"{\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData.success).not.equal(\"\");\r",
							"\r",
							"\r",
							"})\r",
							"//5. Check if field corresponds to a specific value \r",
							"pm.test(\" Check if field corresponds to a specific value\",function()\r",
							"{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.success).to.equal(\"true\")\r",
							"\r",
							"})\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"//7. Status message is ok \r",
							"pm.test(\"Status message is ok \", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"//8.Response time is less than 100ms\r",
							"pm.test(\"Response time is less than 1000ms\", function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"//9. There is a specific header in the response \r",
							"pm.test(\"There is a specific header in the response \", function ()\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"//10. The response has a specific header with a specific value \r",
							"pm.test(\"The response has a specific header with a specific value\",function()\r",
							"{\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\")\r",
							"})\r",
							"//11. Cookie exists \r",
							"pm.test(\"Cookie exists\", function()\r",
							"{\r",
							"    pm.cookies.has(\"__cfduid\")\r",
							"})\r",
							"//12. Cookie has value \r",
							"pm.test(\" Cookie has value\", function()\r",
							"{\r",
							"    try\r",
							"    {\r",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");\r",
							"        console.log(MY_COOKIE)\r",
							"    }\r",
							"    catch(e)\r",
							"    {\r",
							"        console.log(\"SOME PROBLEM WITH Cookie ->\" + e)\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqbin.com/echo/get/json",
					"protocol": "https",
					"host": [
						"reqbin",
						"com"
					],
					"path": [
						"echo",
						"get",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = \r",
							"{\r",
							"    //specify the type of object\r",
							"    \"type\" :\"object\",\r",
							"    //specify requires properties\r",
							"    \"required\":[\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    //describe the properties\r",
							"    \"properties\":\r",
							"    {\r",
							"        \"people\":{\"type\":\"string\"},\r",
							"        \"planets\":{\"type\":\"string\"},\r",
							"        \"films\":{\"type\":\"string\"},\r",
							"        \"species\":{\"type\":\"string\"},\r",
							"        \"vehicles\":{\"type\":\"string\"},\r",
							"        \"starships\":{\"type\":\"string\"}\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Body is correct ', function()\r",
							"{\r",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody)\r",
							"\r",
							"var schema = \r",
							"{\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"name\",\"homeworld\",\"films\",\"vehicles\",\"starships\"],\r",
							"    \"property\":\r",
							"    {\r",
							"        \"name\":{\"type\":\"string\"},\r",
							"        \"homeworld\":{\"type\":\"string\"},\r",
							"        \"films\":\r",
							"        {\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\"type\":\"string\"}\r",
							"        },\r",
							"        \"vehicles\":\r",
							"        {\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\"type\":\"string\"}\r",
							"        },\r",
							"                \"vehicles\":\r",
							"        {\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\"type\":\"string\"}\r",
							"        }\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"pm.test('Body is correct',function()\r",
							"{\r",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	]
}